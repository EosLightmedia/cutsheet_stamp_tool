{"ast":null,"code":"var _jsxFileName = \"/Users/stevengraves/EosDev/EosApps/cutsheet_stamp_tool_dev/frontend-dev/src/Components/DateSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DateSelector({\n  selectedDate,\n  setSelectedDate\n}) {\n  _s();\n  const [internalDate, setInternalDate] = useState(\"\");\n\n  // Convert date to \"YYYY-MM-DD\" format for the input\n  const formatDateForInput = date => {\n    if (!date) return \"\";\n    const [year, month, day] = [date.getFullYear(), date.getMonth() + 1, date.getDate()];\n    return `${year}-${String(month).padStart(2, \"0\")}-${String(day).padStart(2, \"0\")}`;\n  };\n\n  // Convert date to \"DEC / 15 / 2023\" format\n  const formatDateForDisplay = date => {\n    if (!date) return \"\";\n    const monthNames = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n    const year = date.getFullYear();\n    const month = monthNames[date.getMonth()];\n    const day = date.getDate().toString().padStart(2, \"0\");\n    return `${month} / ${day} / ${year}`;\n  };\n\n  // Handle changes to the date input\n  const handleChange = event => {\n    const dateValue = event.target.value;\n    setInternalDate(dateValue);\n\n    // Adjust the date creation to treat the input as a UTC date\n    const [year, month, day] = dateValue.split(\"-\").map(num => parseInt(num, 10));\n    const newDate = new Date(Date.UTC(year, month - 1, day)); // Months are 0-indexed in JavaScript Date\n\n    setSelectedDate(formatDateForDisplay(newDate));\n  };\n\n  // Initialize with today's date\n  useEffect(() => {\n    const today = new Date();\n    setInternalDate(formatDateForInput(today));\n    setSelectedDate(formatDateForDisplay(today));\n  }, []); // Empty dependency array to run only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"date-selector-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"date-selector\",\n      className: \"input-label\",\n      children: \"Select a Date:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      id: \"date-selector\",\n      className: \"date-input\",\n      value: internalDate,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(DateSelector, \"VEYYl0nUOU1FBE9lD+MdvbC1d80=\");\n_c = DateSelector;\nexport default DateSelector;\nvar _c;\n$RefreshReg$(_c, \"DateSelector\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DateSelector","selectedDate","setSelectedDate","_s","internalDate","setInternalDate","formatDateForInput","date","year","month","day","getFullYear","getMonth","getDate","String","padStart","formatDateForDisplay","monthNames","toString","handleChange","event","dateValue","target","value","split","map","num","parseInt","newDate","Date","UTC","today","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","_c","$RefreshReg$"],"sources":["/Users/stevengraves/EosDev/EosApps/cutsheet_stamp_tool_dev/frontend-dev/src/Components/DateSelector.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\n\nfunction DateSelector({ selectedDate, setSelectedDate }) {\n  const [internalDate, setInternalDate] = useState(\"\")\n\n  // Convert date to \"YYYY-MM-DD\" format for the input\n  const formatDateForInput = (date) => {\n    if (!date) return \"\"\n    const [year, month, day] = [\n      date.getFullYear(),\n      date.getMonth() + 1,\n      date.getDate(),\n    ]\n    return `${year}-${String(month).padStart(2, \"0\")}-${String(day).padStart(\n      2,\n      \"0\"\n    )}`\n  }\n\n  // Convert date to \"DEC / 15 / 2023\" format\n  const formatDateForDisplay = (date) => {\n    if (!date) return \"\"\n    const monthNames = [\n      \"JAN\",\n      \"FEB\",\n      \"MAR\",\n      \"APR\",\n      \"MAY\",\n      \"JUN\",\n      \"JUL\",\n      \"AUG\",\n      \"SEP\",\n      \"OCT\",\n      \"NOV\",\n      \"DEC\",\n    ]\n    const year = date.getFullYear()\n    const month = monthNames[date.getMonth()]\n    const day = date.getDate().toString().padStart(2, \"0\")\n    return `${month} / ${day} / ${year}`\n  }\n\n  // Handle changes to the date input\n  const handleChange = (event) => {\n    const dateValue = event.target.value\n    setInternalDate(dateValue)\n\n    // Adjust the date creation to treat the input as a UTC date\n    const [year, month, day] = dateValue\n      .split(\"-\")\n      .map((num) => parseInt(num, 10))\n    const newDate = new Date(Date.UTC(year, month - 1, day)) // Months are 0-indexed in JavaScript Date\n\n    setSelectedDate(formatDateForDisplay(newDate))\n  }\n\n  // Initialize with today's date\n  useEffect(() => {\n    const today = new Date()\n    setInternalDate(formatDateForInput(today))\n    setSelectedDate(formatDateForDisplay(today))\n  }, []) // Empty dependency array to run only once on mount\n\n  return (\n    <div className=\"date-selector-container\">\n      <label htmlFor=\"date-selector\" className=\"input-label\">\n        Select a Date:\n      </label>\n      <input\n        type=\"date\"\n        id=\"date-selector\"\n        className=\"date-input\"\n        value={internalDate}\n        onChange={handleChange}\n      />\n    </div>\n  )\n}\n\nexport default DateSelector\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}